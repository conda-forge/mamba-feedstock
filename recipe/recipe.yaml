context:
  version: "2.3.1"
  build_number: 1

recipe:
  name: mamba-split
  version: ${{ version }}

source:
  url: https://github.com/mamba-org/mamba/archive/refs/tags/${{ version }}.tar.gz
  sha256: a742b22c656f736408e0f044d412674ce9cfa84e8b85e9475afa5477f28a94ef

build:
  number: ${{ build_number }}

outputs:
  - package:
      name: libmamba
    build:
      script: build_mamba
    requirements:
      run_exports:
        - ${{ pin_subpackage('libmamba', upper_bound='x.x') }}
      ignore_run_exports:
        by_name:
          - spdlog
      build:
        - ${{ compiler('cxx') }}
        - ${{ stdlib("c") }}
        - cmake
        - ninja
      host:
        - libsolv >=0.7.23
        - libcurl >=8.4.0
        - openssl
        # Build with lgpl so that there is no question about the license
        - libarchive * lgpl_*
        - nlohmann_json <3.12
        - cpp-expected
        - reproc
        - reproc-cpp >=14.2.4.post0
        - spdlog
        - yaml-cpp
        - cli11
        - fmt >=11.1.0
        - zstd
        - simdjson >=3.3.0
        - ${{ "winreg" if win }}
      run:
        # `nlohmann_json` is pinned because we expose it in the API of libmamba
        # (`nlohmann_json` objects are put in version namespaces because the author
        # does not want to take any risk regarding ABI compatibility)
        #
        # Since `nlohmann_json` is a heaer only library, it does not have run_export,
        # and we don't have the choice, we need to pin it here exactly
        #
        # Therefore, any library exchanging `nlohmann_json` objects with libmamba
        # must be built with exactly the same version of nlohmann_json as that
        # used to build mamba.
        - ${{ pin_compatible('nlohmann_json', upper_bound='x.x.x') }}
        # Similar reasons apply to `cpp-expected`.
        - ${{ pin_compatible('cpp-expected', upper_bound='x.x.x') }}
    tests:
      - package_contents:
          lib:
            - libmamba
          include:
            - mamba/version.hpp
          files:
            exists:
              - ${{ "Library/" if win }}lib/cmake/libmamba/libmambaConfig.cmake
              - ${{ "Library/" if win }}lib/cmake/libmamba/libmambaConfigVersion.cmake
            not_exists:
              - etc/profile.d/mamba.sh
              - ${{ "Library/" if win }}lib/libmambapy*
              - ${{ "Library/" if win }}lib/site-package/*
      - script:
          - if: unix
            then:
            # Version tests
              - cat $PREFIX/include/mamba/version.hpp | grep "LIBMAMBA_VERSION_MAJOR ${{ (version | split('.'))[0] }}"
              - cat $PREFIX/include/mamba/version.hpp | grep "LIBMAMBA_VERSION_MINOR ${{ (version | split('.'))[1] }}"
              - cat $PREFIX/include/mamba/version.hpp | grep "LIBMAMBA_VERSION_PATCH ${{ (version | split('.'))[2] }}"

  - package:
      name: libmambapy
    build:
      script: build_mamba
      string: py${{ python | version_to_buildstring }}h${{ hash }}_${{ build_number }}
    requirements:
      run_exports:
        - ${{ pin_subpackage('libmambapy', upper_bound='x.x') }}
      ignore_run_exports:
        by_name:
          - spdlog
      build:
        - ${{ compiler('cxx') }}
        - ${{ stdlib("c") }}
        - cmake
        - ninja
        - if: build_platform != target_platform
          then:
            - python
            - cross-python_${{ target_platform }}
            - pybind11
            - pybind11-abi
      host:
        - python
        - scikit-build
        - pip
        - setuptools <79
        - pybind11
        - pybind11-abi
        - openssl
        - yaml-cpp
        - cpp-expected
        - spdlog
        - fmt >=11.1.0
        - termcolor-cpp
        - nlohmann_json <3.12
        - ${{ pin_subpackage('libmamba', exact=True) }}
        # zstd is not a direct dependency but this specification is needed to
        # distinguish builds of libmambapy for specific specific version of zstd.
        - zstd
      run:
        - python
        - ${{ pin_subpackage('libmamba', exact=True) }}
    tests:
      - package_contents:
          files:
            not_exists:
              - ${{ "Library/" if win }}lib/cmake/libmamba/libmambaConfig.cmake
              - ${{ "Library/" if win }}lib/libmamba*
      - python:
          imports:
            - libmambapy
            - libmambapy.bindings
      - script:
          - python -c "import libmambapy; assert libmambapy.__version__ == '${{ ( version | split('.') ) [:3] | join('.') }}'"

  - package:
      name: libmambapy-stubs
    build:
      script: build_mamba
      noarch: python
      skip: env.exists('CI') and not (linux and x86_64)
    requirements:
      host:
        - python >=${{ python_min }}
        - pip
        - setuptools
        - mypy
        - libmambapy ==${{ version }}
      run_constraints:
        - libmambapy ==${{ version }}
    tests:
      - package_contents:
          files:
            exists:
              - '**/*.pyi'

  - package:
      name: mamba
    build:
      script: build_mamba
    requirements:
      ignore_run_exports:
        from_package:
          - spdlog
          - fmt
          - libsolv
          - ${{ compiler('cxx') if linux }}
          - if: unix
            then:
              - libcurl
              - openssl
      build:
        - ${{ compiler('cxx') }}
        - ${{ stdlib("c") }}
        - cmake
        - ninja
        - if: win
          then:
            - vcpkg-tool
            - curl >=8.4.0
            - zlib
      host:
        - cli11 >=2.2,<3
        - reproc
        - reproc-cpp
        - ${{ pin_subpackage('libmamba', exact=True) }}
        - spdlog
        # zstd is not a direct dependency but this specification is needed to
        # distinguish build of mamba for specific specific version of zstd.
        - zstd
      run:
        - ${{ pin_subpackage('libmamba', exact=True) }}
    tests:
      - package_contents:
          bin:
            - mamba
          files:
            exists:
              - condabin/mamba${{ ".bat" if win }}
              - if: unix
                then: etc/profile.d/mamba.sh
            not_exists:
              - ${{ "Library/" if win }}lib/libmamba*
              - ${{ "Library/" if win }}lib/site-package/*
      - script:
          - mamba --help
          - if: unix
            then:
            # Execute this script
              - . ${PREFIX}/etc/profile.d/mamba.sh
              - ${PREFIX}/condabin/mamba --help
              - mamba clean --all --dry-run
              - mamba repoquery depends mamba
              - mamba create -p ./myenv --override-channels -c conda-forge --yes python=3.9
              - ./myenv/bin/python --version
              - ./myenv/bin/python -c 'import os'
            else:
              - CALL %PREFIX%/condabin/mamba.bat --help
              - mkdir %TEMP%\mamba
              - mamba create -p ./myenv --override-channels -c conda-forge --yes python=3.9
              - myenv\python.exe --version
              - myenv\python.exe -c "import os"

about:
  homepage: https://github.com/mamba-org/mamba
  repository: https://github.com/mamba-org/mamba
  documentation: https://mamba.readthedocs.io/
  license: BSD-3-Clause
  license_file:
    - LICENSE
  summary: A fast drop-in alternative to conda, using libsolv for dependency resolution
  description: |
    # Mamba, the Fast Cross-Platform Package Manager

    [![Build Status](https://github.com/mamba-org/mamba/workflows/CI/badge.svg)](https://github.com/mamba-org/mamba/actions)
    [![Join the Gitter Chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/mamba-org/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
    [![docs](https://readthedocs.org/projects/mamba/badge/?version=latest&style=flat)](https://mamba.readthedocs.io/en/latest)

    `mamba` is a reimplementation of the conda package manager in C++.

    - parallel downloading of repository data and package files using multi-threading
    - libsolv for much faster dependency solving, a state of the art library used in the RPM package manager of Red Hat, Fedora and OpenSUSE
    - core parts of `mamba` are implemented in C++ for maximum efficiency

    At the same time, `mamba` utilizes the same command line parser, package installation and deinstallation code and transaction verification routines as `conda` to stay as compatible as possible.

    Mamba is part of a bigger ecosystem to make scientific packaging more sustainable. You can read our [announcement blog post](https://medium.com/@QuantStack/open-software-packaging-for-science-61cecee7fc23).
    The ecosystem also consists of `quetz`, an open source `conda` package server and `boa`, a fast `conda` package builder.

    ### Installation

    Please refer to the [`mamba` and `micromamba` installation guide](https://mamba.readthedocs.io/en/latest/installation.html) in the documentation.

    ### Additional features in Mamba and Micromamba

    `mamba` and `micromamba` come with features on top of stock `conda`.

    ### `repoquery`

    To efficiently query repositories and query package dependencies you can use `mamba repoquery` or `micromamba repoquery`.
    See the [repoquery documentation](https://mamba.readthedocs.io/en/latest/user_guide/mamba.html#repoquery) for details.

    ### Installing lock files

    `micromamba` can be used to install lock files generated by [conda-lock](https://conda-incubator.github.io/conda-lock/) without having to install `conda-lock`. Simply invoke e.g. `micromamba create -n my-env -f conda-lock.yml` with an environment lockfile named `*-lock.yml` or `*-lock.yaml`.


extra:
  recipe-maintainers:
    - jjerphan
    - AntoinePrv
    - adriendelsalle
    - SylvainCorlay
    - JohanMabille
    - wolfv
    - ericmjl
