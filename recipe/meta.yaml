{% set name = "mamba" %}
{% set libmamba_version = "2.0.0alpha2" %}
{% set libmambapy_version = "2.0.0alpha2" %}
{% set release = "2024.02.02" %}

package:
  name: mamba-split

source:
  url: https://github.com/mamba-org/mamba/archive/refs/tags/{{ release }}.tar.gz
  sha256: 6c481636da75250c4296bb51ba7f55a513627fe3138fcacdfafebfcfdb65cd13

build:
  number: 1

outputs:
  - name: libmamba
    version: {{ libmamba_version }}
    script: build_mamba.sh                       # [unix]
    script: build_mamba.bat                      # [win]
    build:
      run_exports:
        - {{ pin_subpackage('libmamba', max_pin='x.x') }}
      ignore_run_exports:
        - spdlog
        - python  # [win]
    requirements:
      build:
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - python  # [win]
      host:
        - libsolv >=0.7.23
        - libcurl >=8.4.0
        - openssl
        - libarchive
        - nlohmann_json
        - cpp-expected
        - reproc
        - reproc-cpp >=14.2.4.post0
        - spdlog
        - yaml-cpp
        - cli11
        - fmt
        - winreg                                 # [win]
        - zstd
        - simdjson >=3.3.0
      run:
        - libsolv >=0.7.23
    test:
      commands:
        - test -d ${PREFIX}/include/mamba  # [unix]
        - test -f ${PREFIX}/include/mamba/version.hpp  # [unix]
        - test -f ${PREFIX}/lib/cmake/libmamba/libmambaConfig.cmake  # [unix]
        - test -f ${PREFIX}/lib/cmake/libmamba/libmambaConfigVersion.cmake  # [unix]
        - test -e ${PREFIX}/lib/libmamba${SHLIB_EXT}  # [unix]
        - if not exist %LIBRARY_PREFIX%\include\mamba\version.hpp (exit 1)  # [win]
        - if not exist %LIBRARY_PREFIX%\lib\cmake\libmamba\libmambaConfig.cmake (exit 1)  # [win]
        - if not exist %LIBRARY_PREFIX%\lib\cmake\libmamba\libmambaConfigVersion.cmake (exit 1)  # [win]
        - if not exist %LIBRARY_PREFIX%\bin\libmamba.dll (exit 1)  # [win]
        - if not exist %LIBRARY_PREFIX%\lib\libmamba.lib (exit 1)  # [win]
        {% set libmamba_version_split = libmamba_version.split('.') %}
        - cat $PREFIX/include/mamba/version.hpp | grep "LIBMAMBA_VERSION_MAJOR {{ libmamba_version_split[0] }}"  # [unix]
        - cat $PREFIX/include/mamba/version.hpp | grep "LIBMAMBA_VERSION_MINOR {{ libmamba_version_split[1] }}"  # [unix]
        # TODO: uncomment for release 2.0.0
        #- cat $PREFIX/include/mamba/version.hpp | grep "LIBMAMBA_VERSION_PATCH {{ libmamba_version_split[2] }}"  # [unix]

  - name: libmambapy
    version: {{ libmambapy_version }}
    script: build_mamba.sh                       # [unix]
    script: build_mamba.bat                      # [win]
    build:
      string: py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
      run_exports:
        - {{ pin_subpackage('libmambapy', max_pin='x.x') }}
      ignore_run_exports:
        - spdlog
      skip: True  # [python_impl == 'pypy']
    requirements:
      build:
        - {{ compiler('cxx') }}
        - cmake
        - ninja
        - python                                 # [build_platform != target_platform]
        - cross-python_{{ target_platform }}     # [build_platform != target_platform]
        - pybind11                               # [build_platform != target_platform]
        - pybind11-abi                           # [build_platform != target_platform]
      host:
        - python
        - scikit-build
        - pip
        - pybind11
        - pybind11-abi
        - openssl
        - yaml-cpp
        - cpp-expected
        - spdlog
        - fmt
        - termcolor-cpp
        - nlohmann_json
        - {{ pin_subpackage('libmamba', exact=True) }}
      run:
        - python
        - {{ pin_subpackage('libmamba', exact=True) }}

    test:
      imports:
        - libmambapy
        - libmambapy.bindings
      commands:
        #- python -c "import libmambapy._version; assert libmambapy._version.__version__ == '{{ libmambapy_version }}'"

about:
  home: https://github.com/mamba-org/mamba
  license: BSD-3-Clause
  license_file: LICENSE
  license_family: BSD
  summary: A fast drop-in alternative to conda, using libsolv for dependency resolution
  description: |
    # Mamba, the Fast Cross-Platform Package Manager

    [![Build Status](https://github.com/mamba-org/mamba/workflows/CI/badge.svg)](https://github.com/mamba-org/mamba/actions)
    [![Join the Gitter Chat](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/mamba-org/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
    [![docs](https://readthedocs.org/projects/mamba/badge/?version=latest&style=flat)](https://mamba.readthedocs.io/en/latest)

    `mamba` is a reimplementation of the conda package manager in C++.

    - parallel downloading of repository data and package files using multi-threading
    - libsolv for much faster dependency solving, a state of the art library used in the RPM package manager of Red Hat, Fedora and OpenSUSE
    - core parts of `mamba` are implemented in C++ for maximum efficiency

    At the same time, `mamba` utilizes the same command line parser, package installation and deinstallation code and transaction verification routines as `conda` to stay as compatible as possible.

    Mamba is part of a bigger ecosystem to make scientific packaging more sustainable. You can read our [announcement blog post](https://medium.com/@QuantStack/open-software-packaging-for-science-61cecee7fc23).
    The ecosystem also consists of `quetz`, an open source `conda` package server and `boa`, a fast `conda` package builder.

    ### Installation

    Please refer to the [`mamba` and `micromamba` installation guide](https://mamba.readthedocs.io/en/latest/installation.html) in the documentation.

    ### Additional features in Mamba and Micromamba

    `mamba` and `micromamba` come with features on top of stock `conda`.

    ### `repoquery`

    To efficiently query repositories and query package dependencies you can use `mamba repoquery` or `micromamba repoquery`.
    See the [repoquery documentation](https://mamba.readthedocs.io/en/latest/user_guide/mamba.html#repoquery) for details.

    ### Installing lock files

    `micromamba` can be used to install lock files generated by [conda-lock](https://conda-incubator.github.io/conda-lock/) without having to install `conda-lock`. Simply invoke e.g. `micromamba create -n my-env -f conda-lock.yml` with an environment lockfile named `*-lock.yml` or `*-lock.yaml`.

  dev_url: https://github.com/mamba-org/mamba

extra:
  recipe-maintainers:
    - AntoinePrv
    - adriendelsalle
    - SylvainCorlay
    - JohanMabille
    - wolfv
    - ericmjl
